Sub DuplicateSheetAsCrossMatrix()
    Dim ws As Worksheet
    Dim existWs As Worksheet
    Dim targetName As String

    targetName = "CrossMatrix"

    ' アクティブなシートを取得
    Set ws = ThisWorkbook.ActiveSheet

    ' アクティブなシートが目的のシート名と同じか確認
    If ws.Name = targetName Then
        MsgBox "そのシートは複製できません", vbExclamation
        Exit Sub
    End If

    ' 既にCrossMatrixという名前のシートが存在するか確認
    On Error Resume Next ' エラーを無視
    Set existWs = ThisWorkbook.Sheets(targetName)
    On Error GoTo 0 ' エラー処理を元に戻す

    ' 存在する場合は削除
    If Not existWs Is Nothing Then
        Application.DisplayAlerts = False
        existWs.Delete
        Application.DisplayAlerts = True
    End If

    ' アクティブなシートを複製
    ws.Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)
    ThisWorkbook.ActiveSheet.Name = targetName

End Sub


Sub MakeProcesCrossMatrix()
    Dim ws As Worksheet
    Dim TargetProfiles As Range, Elements As Range
    Dim cell As Range, targetCell As Range
    Dim i As Long, j As Long
    Dim lastRow As Long, lastCol As Long
    Dim Question As String
    Dim SystemMessage As String
    
    ' Matrixシートを設定
    Set ws = ThisWorkbook.Sheets("CrossMatrix")
    
    If Not ActiveSheet.Name = "CrossMatrix" Then
        ThisWorkbook.Sheets("CrossMatrix").Activate
    End If
    
    
    ' TargetProfilesとElementsの範囲を動的に設定
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Set TargetProfiles = ws.Range("A4:A" & lastRow) ' A4から開始に変更
    
    lastCol = ws.Cells(3, ws.Columns.Count).End(xlToLeft).Column
    Set Elements = ws.Range(ws.Cells(3, 2), ws.Cells(3, lastCol))
    
    
    
    ' 各TargetProfilesの値と各Elementsの値を掛け合わせる
    i = 3 ' iを1から開始に変更
    For Each cell In TargetProfiles
        i = i + 1
        j = 1
        
        
        
        'Application.StatusBar = i - 1 & "つ目のプロファイルを処理中... "
        
        For Each targetCell In Elements
        
             Application.ScreenUpdating = False  ' 画面更新をオフにする
        
            SystemMessage = CStr(ws.Range("A1").Value)
            storyOutlineTemplate = ws.Range("A2").Value
            
            j = j + 1
            
            
            storyOutlineTemplate = Replace(storyOutlineTemplate, "[行]", cell.Value)
            storyOutlineTemplate = Replace(storyOutlineTemplate, "[列]", targetCell.Value)
            'Question = cell.Value & targetCell.Value
            Question = storyOutlineTemplate
            
            DoEvents
            DoEvents
            
            Application.ScreenUpdating = True  ' 画面更新をオンにする
            
            ws.Cells(i, j).Value = Question & vbCrLf & vbCrLf & "処理中..."
            
            Application.ScreenUpdating = False  ' 画面更新をオフにする
            
            result = CallAzureOpenAIAPI(Question, SystemMessage)
            
            
            
            Application.ScreenUpdating = True  ' 画面更新をオンにする
            
            ws.Cells(i, j).Value = result
            ws.Cells(i, j).Select
            Application.GoTo ws.Cells(i, 2), Scroll:=True

            
            DoEvents
            
            'Application.ScreenUpdating = False  ' 画面更新をオフにする
            
            
        Next targetCell
        
        Application.StatusBar = False
        
        
    Next cell
    
    ws.Cells(2, 2).Select
    Application.GoTo ws.Cells(2, 2), Scroll:=True
    
    
    
End Sub


Function CallAzureOpenAIAPI(Question As String, SystemMessage As String) As String


    Dim request As Object
    Set request = CreateObject("WinHttp.WinHttpRequest.5.1")
      
    Dim apiKey As String
    

    
    'apiKey = ""
    apiKey = Module3.OpenAIapiKey

    Dim resource As String

    resource = Module4.OpenAIresourceName
    
    Dim deployment As String
    deployment = ""
      
    Dim endpoint As String
    endpoint = "https://" & resource & ".openai.azure.com/openai/deployments/" & deployment & "/chat/completions?api-version=2023-05-15"
    
    Dim requestBody As String
    Dim ContentMessage As String
    
    Dim jsonString As String
    Dim jsonParser As Object
    Dim jsonObject As Object
    
    Dim garbledString As String
    Dim correctString As String
    
      
    
    ' ResolveTimeout, ConnectTimeout, SendTimeout, ReceiveTimeout
    request.setTimeouts -1, -1, 300000, 300000
    
    requestBody = "{""messages"":[{""role"": ""system"", ""content"": """ & SystemMessage & """},{""role"": ""user"", ""content"": """ & Question & """}], ""max_tokens"": 800, ""temperature"": 1.2}"
       
    request.Open "POST", endpoint, False
    request.setRequestHeader "Content-Type", "application/json"
    request.setRequestHeader "api-key", apiKey


    request.send requestBody

    jsonString = request.responseText
    
    ' JSONデータをオブジェクトに変換
    Set jsonObject = JsonConverter.ParseJson(jsonString)
      
    ' contentの内容を取得
    ContentMessage = jsonObject("choices")(1)("message")("content")
    
     ' 文字列をISO-8859-1でバイトにエンコードして、UTF-8としてデコード
    correctString = ConvertEncoding(ContentMessage)
    
    'MsgBox correctString
    CallAzureOpenAIAPI = correctString
    
    Set jsonParser = Nothing
    Set jsonObject = Nothing
End Function

    

    
    
    
    
Function ConvertEncoding(inputStr As String) As String
    Dim stream As Object
    Dim bytes() As Byte
    
    ' ADODB.Stream オブジェクトを生成
    Set stream = CreateObject("ADODB.Stream")
    stream.Type = 2 'Text
    stream.Charset = "iso-8859-1"
    stream.Open
    stream.WriteText inputStr
    
    ' テキストをバイナリモードに変更して読み込む
    stream.Position = 0
    stream.Type = 1 'Binary
    bytes = stream.Read
    
    ' オブジェクトをクリーンアップ
    stream.Close
    Set stream = Nothing
    
    ' 新しいストリームを生成してバイナリデータをUTF-8としてテキストモードで読み込む
    Set stream = CreateObject("ADODB.Stream")
    stream.Type = 1 'Binary
    stream.Open
    stream.Write bytes
    stream.Position = 0
    stream.Type = 2 'Text
    stream.Charset = "UTF-8"
    ConvertEncoding = stream.ReadText
    
    ' オブジェクトをクリーンアップ
    stream.Close
    Set stream = Nothing
End Function


Function Base64Decode(base64String As String) As String
    Dim xmlObj As Object
    Dim elem As Object
    Dim byteArray() As Byte
    Dim str As String
    Dim i As Long
    
    ' Base64 to ByteArray
    Set xmlObj = CreateObject("MSXML2.DOMDocument")
    Set elem = xmlObj.createElement("tmp")
    elem.DataType = "bin.base64"
    elem.Text = base64String
    byteArray = elem.nodeTypedValue
    Set xmlObj = Nothing
    Set elem = Nothing
    
    ' ByteArray to String
    For i = LBound(byteArray) To UBound(byteArray)
        str = str & Chr(byteArray(i))
    Next i
    
    Base64Decode = str
End Function



